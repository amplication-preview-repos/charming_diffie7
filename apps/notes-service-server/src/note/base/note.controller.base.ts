/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NoteService } from "../note.service";
import { NoteCreateInput } from "./NoteCreateInput";
import { Note } from "./Note";
import { NoteFindManyArgs } from "./NoteFindManyArgs";
import { NoteWhereUniqueInput } from "./NoteWhereUniqueInput";
import { NoteUpdateInput } from "./NoteUpdateInput";
import { NoteTagFindManyArgs } from "../../noteTag/base/NoteTagFindManyArgs";
import { NoteTag } from "../../noteTag/base/NoteTag";
import { NoteTagWhereUniqueInput } from "../../noteTag/base/NoteTagWhereUniqueInput";

export class NoteControllerBase {
  constructor(protected readonly service: NoteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Note })
  async createNote(@common.Body() data: NoteCreateInput): Promise<Note> {
    return await this.service.createNote({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Note] })
  @ApiNestedQuery(NoteFindManyArgs)
  async notes(@common.Req() request: Request): Promise<Note[]> {
    const args = plainToClass(NoteFindManyArgs, request.query);
    return this.service.notes({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Note })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async note(
    @common.Param() params: NoteWhereUniqueInput
  ): Promise<Note | null> {
    const result = await this.service.note({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Note })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNote(
    @common.Param() params: NoteWhereUniqueInput,
    @common.Body() data: NoteUpdateInput
  ): Promise<Note | null> {
    try {
      return await this.service.updateNote({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Note })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNote(
    @common.Param() params: NoteWhereUniqueInput
  ): Promise<Note | null> {
    try {
      return await this.service.deleteNote({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/noteTags")
  @ApiNestedQuery(NoteTagFindManyArgs)
  async findNoteTags(
    @common.Req() request: Request,
    @common.Param() params: NoteWhereUniqueInput
  ): Promise<NoteTag[]> {
    const query = plainToClass(NoteTagFindManyArgs, request.query);
    const results = await this.service.findNoteTags(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        note: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/noteTags")
  async connectNoteTags(
    @common.Param() params: NoteWhereUniqueInput,
    @common.Body() body: NoteTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      noteTags: {
        connect: body,
      },
    };
    await this.service.updateNote({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/noteTags")
  async updateNoteTags(
    @common.Param() params: NoteWhereUniqueInput,
    @common.Body() body: NoteTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      noteTags: {
        set: body,
      },
    };
    await this.service.updateNote({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/noteTags")
  async disconnectNoteTags(
    @common.Param() params: NoteWhereUniqueInput,
    @common.Body() body: NoteTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      noteTags: {
        disconnect: body,
      },
    };
    await this.service.updateNote({
      where: params,
      data,
      select: { id: true },
    });
  }
}
