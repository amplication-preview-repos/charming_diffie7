/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NoteTagService } from "../noteTag.service";
import { NoteTagCreateInput } from "./NoteTagCreateInput";
import { NoteTag } from "./NoteTag";
import { NoteTagFindManyArgs } from "./NoteTagFindManyArgs";
import { NoteTagWhereUniqueInput } from "./NoteTagWhereUniqueInput";
import { NoteTagUpdateInput } from "./NoteTagUpdateInput";

export class NoteTagControllerBase {
  constructor(protected readonly service: NoteTagService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NoteTag })
  async createNoteTag(
    @common.Body() data: NoteTagCreateInput
  ): Promise<NoteTag> {
    return await this.service.createNoteTag({
      data: {
        ...data,

        note: data.note
          ? {
              connect: data.note,
            }
          : undefined,

        tag: data.tag
          ? {
              connect: data.tag,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        note: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NoteTag] })
  @ApiNestedQuery(NoteTagFindManyArgs)
  async noteTags(@common.Req() request: Request): Promise<NoteTag[]> {
    const args = plainToClass(NoteTagFindManyArgs, request.query);
    return this.service.noteTags({
      ...args,
      select: {
        createdAt: true,
        id: true,

        note: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NoteTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async noteTag(
    @common.Param() params: NoteTagWhereUniqueInput
  ): Promise<NoteTag | null> {
    const result = await this.service.noteTag({
      where: params,
      select: {
        createdAt: true,
        id: true,

        note: {
          select: {
            id: true,
          },
        },

        tag: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NoteTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNoteTag(
    @common.Param() params: NoteTagWhereUniqueInput,
    @common.Body() data: NoteTagUpdateInput
  ): Promise<NoteTag | null> {
    try {
      return await this.service.updateNoteTag({
        where: params,
        data: {
          ...data,

          note: data.note
            ? {
                connect: data.note,
              }
            : undefined,

          tag: data.tag
            ? {
                connect: data.tag,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          note: {
            select: {
              id: true,
            },
          },

          tag: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NoteTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNoteTag(
    @common.Param() params: NoteTagWhereUniqueInput
  ): Promise<NoteTag | null> {
    try {
      return await this.service.deleteNoteTag({
        where: params,
        select: {
          createdAt: true,
          id: true,

          note: {
            select: {
              id: true,
            },
          },

          tag: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
