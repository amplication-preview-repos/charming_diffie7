/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NoteTag as PrismaNoteTag,
  Note as PrismaNote,
  Tag as PrismaTag,
} from "@prisma/client";

export class NoteTagServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.NoteTagCountArgs, "select">): Promise<number> {
    return this.prisma.noteTag.count(args);
  }

  async noteTags(args: Prisma.NoteTagFindManyArgs): Promise<PrismaNoteTag[]> {
    return this.prisma.noteTag.findMany(args);
  }
  async noteTag(
    args: Prisma.NoteTagFindUniqueArgs
  ): Promise<PrismaNoteTag | null> {
    return this.prisma.noteTag.findUnique(args);
  }
  async createNoteTag(args: Prisma.NoteTagCreateArgs): Promise<PrismaNoteTag> {
    return this.prisma.noteTag.create(args);
  }
  async updateNoteTag(args: Prisma.NoteTagUpdateArgs): Promise<PrismaNoteTag> {
    return this.prisma.noteTag.update(args);
  }
  async deleteNoteTag(args: Prisma.NoteTagDeleteArgs): Promise<PrismaNoteTag> {
    return this.prisma.noteTag.delete(args);
  }

  async getNote(parentId: string): Promise<PrismaNote | null> {
    return this.prisma.noteTag
      .findUnique({
        where: { id: parentId },
      })
      .note();
  }

  async getTag(parentId: string): Promise<PrismaTag | null> {
    return this.prisma.noteTag
      .findUnique({
        where: { id: parentId },
      })
      .tag();
  }
}
