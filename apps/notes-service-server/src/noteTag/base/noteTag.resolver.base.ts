/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NoteTag } from "./NoteTag";
import { NoteTagCountArgs } from "./NoteTagCountArgs";
import { NoteTagFindManyArgs } from "./NoteTagFindManyArgs";
import { NoteTagFindUniqueArgs } from "./NoteTagFindUniqueArgs";
import { CreateNoteTagArgs } from "./CreateNoteTagArgs";
import { UpdateNoteTagArgs } from "./UpdateNoteTagArgs";
import { DeleteNoteTagArgs } from "./DeleteNoteTagArgs";
import { Note } from "../../note/base/Note";
import { Tag } from "../../tag/base/Tag";
import { NoteTagService } from "../noteTag.service";
@graphql.Resolver(() => NoteTag)
export class NoteTagResolverBase {
  constructor(protected readonly service: NoteTagService) {}

  async _noteTagsMeta(
    @graphql.Args() args: NoteTagCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NoteTag])
  async noteTags(
    @graphql.Args() args: NoteTagFindManyArgs
  ): Promise<NoteTag[]> {
    return this.service.noteTags(args);
  }

  @graphql.Query(() => NoteTag, { nullable: true })
  async noteTag(
    @graphql.Args() args: NoteTagFindUniqueArgs
  ): Promise<NoteTag | null> {
    const result = await this.service.noteTag(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NoteTag)
  async createNoteTag(
    @graphql.Args() args: CreateNoteTagArgs
  ): Promise<NoteTag> {
    return await this.service.createNoteTag({
      ...args,
      data: {
        ...args.data,

        note: args.data.note
          ? {
              connect: args.data.note,
            }
          : undefined,

        tag: args.data.tag
          ? {
              connect: args.data.tag,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => NoteTag)
  async updateNoteTag(
    @graphql.Args() args: UpdateNoteTagArgs
  ): Promise<NoteTag | null> {
    try {
      return await this.service.updateNoteTag({
        ...args,
        data: {
          ...args.data,

          note: args.data.note
            ? {
                connect: args.data.note,
              }
            : undefined,

          tag: args.data.tag
            ? {
                connect: args.data.tag,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NoteTag)
  async deleteNoteTag(
    @graphql.Args() args: DeleteNoteTagArgs
  ): Promise<NoteTag | null> {
    try {
      return await this.service.deleteNoteTag(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Note, {
    nullable: true,
    name: "note",
  })
  async getNote(@graphql.Parent() parent: NoteTag): Promise<Note | null> {
    const result = await this.service.getNote(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Tag, {
    nullable: true,
    name: "tag",
  })
  async getTag(@graphql.Parent() parent: NoteTag): Promise<Tag | null> {
    const result = await this.service.getTag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
